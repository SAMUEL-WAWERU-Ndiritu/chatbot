import nltk
nltk.download('punkt')
nltk.download('wordnet')
from nltk.stem import WordNetLemmatizer
lemmatizer = WordNetLemmatizer()
import json
import pickle
import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Embedding, LSTM, Dropout
from keras.optimizers import Adam
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical
import time
# Load and preprocess data
data_file = open('job_intents.json', encoding='utf-8').read()
intents = json.loads(data_file)

words = []
classes = []
documents = []
ignore_words = ['?', '!']

for intent in intents['intents']:
    for pattern in intent['patterns']:
        w = nltk.word_tokenize(pattern)
        words.extend(w)
        documents.append((w, intent['tag']))
        if intent['tag'] not in classes:
            classes.append(intent['tag'])

words = [lemmatizer.lemmatize(w.lower()) for w in words if w not in ignore_words]
words = sorted(list(set(words)))
classes = sorted(list(set(classes)))

pickle.dump(words, open('words.pkl', 'wb'))
pickle.dump(classes, open('classes.pkl', 'wb'))

training_x = []
training_y = []

for doc in documents:
    bag = []
    pattern_words = doc[0]
    pattern_words = [lemmatizer.lemmatize(word.lower()) for word in pattern_words]
    
    for w in words:
        bag.append(1) if w in pattern_words else bag.append(0)
    
    output_row = [0] * len(classes)
    output_row[classes.index(doc[1])] = 1
    
    training_x.append(bag)
    training_y.append(output_row)

# Convert training_x and training_y to NumPy arrays
train_x = np.array(training_x)
train_y = np.array(training_y)

# Convert classes to numerical labels using LabelEncoder
label_encoder = LabelEncoder()
train_y_encoded = label_encoder.fit_transform(np.argmax(train_y, axis=1))

# Split the data into training and validation sets
train_x, val_x, train_y_encoded, val_y = train_test_split(train_x, train_y_encoded, test_size=0.2, random_state=42)

# Build and train the model
model = Sequential()
model.add(Embedding(input_dim=len(words), output_dim=100, input_length=len(train_x[0])))
model.add(LSTM(128))
model.add(Dropout(0.5))
model.add(Dense(len(classes), activation='softmax'))

optimizer = Adam(learning_rate=0.001)
model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])

# Train the model
start_time = time.time()
hist = model.fit(train_x, train_y_encoded, validation_data=(val_x, val_y), epochs=50, batch_size=16, verbose=1)
end_time = time.time()

model.save('chatbot_model.h5')

print("Model created and trained.")
print(f"Training time: {end_time - start_time:.2f} seconds")

# Evaluate the model on test data
test_loss, test_accuracy = model.evaluate(val_x, val_y_encoded, verbose=0)
print(f"Test accuracy: {test_accuracy:.4f}")
